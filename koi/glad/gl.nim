#[
    Stripped down minimal OpenGL loader
        Original generated by glad
]#

import strutils

var glVersionMajor, glVersionMinor: int

type
  GLbitfield* = uint32
  GLfloat* = float32
  GLint* = int32
  GLubyte* = uint8
  GLsizei* = int32
  GLenum* = uint32

const
  GL_DEPTH_BUFFER_BIT*: GLenum = GLenum(0x00000100)
  GL_STENCIL_BUFFER_BIT*: GLenum = GLenum(0x00000400)
  GL_COLOR_BUFFER_BIT*: GLenum = GLenum(0x00004000)
  GL_VERSION*: GLenum = GLenum(0x1F02)

var
  GLAD_GL_VERSION_1_0*: bool

  glClear*: proc (mask: GLbitfield) {.cdecl.}
  glClearColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl.}
  glViewport*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl.}
  glGetString*: proc (name: GLenum): ptr GLubyte {.cdecl, gcsafe.}


proc load_GL_VERSION_1_0(load: proc) =
  if not GLAD_GL_VERSION_1_0: return

  glClear = cast[proc (mask: GLbitfield) {.cdecl.}](load("glClear"))
  glClearColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl.}](load("glClearColor"))
  glViewport = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl.}](load("glViewport"))
  glGetString = cast[proc (name: GLenum): ptr GLubyte {.cdecl, gcsafe.}](load("glGetString"))


proc findCoreGL(glVersion: string) =
  var prefixes = ["OpenGL ES-CM ", "OpenGL ES-CL ", "OpenGL ES "]

  var version = glVersion
  for p in prefixes:
    if version.startsWith(p):
      version = version.replace(p)
      break

  var major = ord(glVersion[0]) - ord('0')
  var minor = ord(glVersion[2]) - ord('0')

  glVersionMajor = major
  glVersionMinor = minor

  GLAD_GL_VERSION_1_0 = (major == 1 and minor >= 0) or major > 1


proc gladLoadGL*(load: proc): bool =
  glGetString = cast[proc (name: GLenum): ptr GLubyte {.cdecl, gcsafe.}](load("glGetString"))
  if glGetString == nil: return false

  var glVersion = cast[cstring](glGetString(GL_VERSION))
  if glVersion == nil: return false

  findCoreGL($glVersion)

  load_GL_VERSION_1_0(load)

  return glVersionMajor != 0 or glVersionMinor != 0

